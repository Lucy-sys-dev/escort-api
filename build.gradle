apply from: './version.gradle'

buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
        kotlinVersion = '1.3.61'
        ktlintVersion = '0.28.0'
        h2Version = '1.4.197'
        mssqlVersion = '7.0.0.jre8'
        jacksonVersion = '2.9.6'
        springfoxSwaggerVersion = '3.0.0-SNAPSHOT'//'2.9.2'
        dockerGradleVersion = '0.20.1'
        junit5Version = '5.2.0'
        junit5LauncherVersion = '1.3.1'
        mockitoJunitVersion = '2.21.0'
        javaFakerVersion = '0.16'
        springCloudVersion = 'Greenwich.RELEASE'
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // Spring Boot
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // Kotlin Language
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        // DI support
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        // JPA(Hibernate) no arg support
        classpath "org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}"
        // Docker
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerGradleVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'com.palantir.docker'
apply plugin: 'com.palantir.docker-compose'

group = projectGroup
version = projectVersion

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

allOpen {
    annotations("org.springframework.context.annotation.Configuration",
            "org.springframework.boot.autoconfigure.EnableAutoConfiguration")
}

dependencies {
    // Spring Boot
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')

    // Kotlin Support
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
    compile('org.jetbrains.kotlin:kotlin-reflect')

    // Kotlin 1.2 reflection support
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')

    // Hibernate Java8 Instant support
    compile("org.hibernate:hibernate-java8")

    // Database drivers
    compile("com.h2database:h2:${h2Version}")
    compile("com.microsoft.sqlserver:mssql-jdbc:${mssqlVersion}")

    // Swagger support
    compile("io.springfox:springfox-swagger-ui:${springfoxSwaggerVersion}")
    compile("io.springfox:springfox-swagger2:${springfoxSwaggerVersion}")
    compile("io.springfox:springfox-data-rest:${springfoxSwaggerVersion}")

    // Lint
//    ktlint("com.github.shyiko:ktlint:${ktlintVersion}")

    // Test
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // JUnit5
    testCompile("org.junit.jupiter:junit-jupiter-api:${junit5Version}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${junit5Version}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junit5Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junit5Version}")
    testRuntime("org.junit.platform:junit-platform-launcher:${junit5LauncherVersion}")

    // Mock
    testCompile("org.mockito:mockito-junit-jupiter:${mockitoJunitVersion}")

    // Dev Tool
    runtime('org.springframework.boot:spring-boot-devtools')

    // shiro
//    compile 'org.apache.shiro:shiro-spring-boot-web-starter:1.4.0'
    compile 'com.auth0:java-jwt:3.3.0'

    // log
    compile('io.github.microutils:kotlin-logging:1.6.10')
    // https://mvnrepository.com/artifact/org.codehaus.janino/janino
    compile group: 'org.codehaus.janino', name: 'janino', version: '2.7.8'
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    imports { mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}" }
}

wrapper {
    gradleVersion = '4.10.2'
}

springBoot {
    // This statement tells the Gradle Spring Boot plugin
    // to generate a file
    // build/resources/main/META-INF/build-info.properties
    // that is picked up by Spring Boot to display
    // via /actuator/info endpoint.
    buildInfo {
        properties{
            additional = [
                    by: System.properties['user.name'],
                    operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
                    continuousIntegration: System.getenv('CI') ? true : false,
                    machine: InetAddress.localHost.hostName
            ]
        }
    }
}

docker {
    dependsOn build
    if( project.version ==~ /\d+.\d+.\d+/ ){
        name "${project.group}/${bootJar.baseName}:${project.version}"
    } else {
        name "${project.group}/${bootJar.baseName}"
    }
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}
